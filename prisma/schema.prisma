// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  phone     String
  cellphone String
  cpf       String
  address   Address?
  houses    House[]
  drivers   Driver[]
  services  Service[]

  @@map("users")
}

model Address {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  state          String
  country        String
  district       String
  suburb         String
  street         String
  number         String
  complement     String
  zipCode        String
  referencePoint String
  userId         Int    @unique

  @@map("address")
}

model House {
  id            Int           @id @default(autoincrement())
  proprietary   User          @relation(fields: [proprietaryId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  type          String
  dormitory     Int
  bathrooms     Int
  garage        Int
  iptu          String        
  price         String
  condominium   String
  wather        String
  light         String
  availability  Boolean
  observation   String
  address       AddressHouse?
  photos        PhotosHouse[]
  proprietaryId Int
  @@unique([iptu,proprietaryId])
  @@map("houses")
}

model AddressHouse {
  id             Int    @id @default(autoincrement())
  house          House  @relation(fields: [houseId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  state          String
  country        String
  district       String
  suburb         String
  street         String
  number         String
  complement     String
  zipCode        String
  referencePoint String
  houseId        Int    @unique

  @@map("addressHouse")
}

model PhotosHouse {
  id      Int    @id @default(autoincrement())
  house   House  @relation(fields: [houseId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  name    String
  houseId Int

  @@map("photosHouse")
}

model Service {
  id     Int             @id @default(autoincrement())
  user   User            @relation(fields: [userId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  title  String
  photos PhotosService[]
  userId Int

  @@map("services")
}

model PhotosService {
  id        Int     @id @default(autoincrement())
  service   Service @relation(fields: [serviceId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  name      String
  serviceId Int

  @@map("photosService")
}

model Driver {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  vehicle      String
  type         String
  manufacturer String
  color        String
  plate        String         @unique
  photos       PhotosDriver[]
  userId       Int

  @@unique([plate, userId])
  @@map("driver")
}

model PhotosDriver {
  id       Int    @id @default(autoincrement())
  driver   Driver @relation(fields: [driverId], references: [id],onUpdate: Cascade,onDelete: Cascade)
  imageUrl String
  driverId Int

  @@map("photosDriver")
}
